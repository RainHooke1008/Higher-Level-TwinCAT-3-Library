<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="ListOfINT" Id="{1f279f17-3c1a-46d4-9f80-fabd1b728487}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK ListOfINT
VAR_INPUT
END_VAR
VAR_OUTPUT
	count : UINT;
END_VAR
VAR
	head : POINTER TO NodeINT := NULL;
	tail : POINTER TO NodeINT := NULL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// linked list implementation reference:
// https://www.codesdope.com/blog/article/c-linked-lists-in-c-singly-linked-list/

]]></ST>
    </Implementation>
    <Method Name="Append" Id="{9a7178d1-781d-4472-b3c0-ee021b93d419}">
      <Declaration><![CDATA[
METHOD Append : REFERENCE TO ListOfINT
VAR_INPUT
	data : INT;
END_VAR
VAR
	new : POINTER TO NodeINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
Append REF= THIS^;

new := __NEW(NodeINT);
new^.data := data;
new^.next := NULL;

IF head = NULL THEN
	head := new;
	tail := new;
ELSE
	tail^.next := new;
	tail := tail^.next;
END_IF
count := count + 1;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{6f99c054-c793-45cb-86d6-b559b0fab0f9}">
      <Declaration><![CDATA[
METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Get" Id="{ce3a2eed-6b85-438d-91ce-6a9a094eb9e6}">
      <Declaration><![CDATA[
METHOD Get : INT
VAR_INPUT
	// indexing from end allowed
	// index = 0 returns first element
	// index = 1 returns seconds element
	// index = -1 returns last element
	// index = -2 return before-last element
	index : INT;
END_VAR
VAR
	current : POINTER TO NodeINT := NULL;
	getIndex : INT;
	i : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF head = NULL THEN
	Get := 0;
	RETURN;
END_IF;

// Calculate actual index in List
getIndex := (count * BOOL_TO_INT(index < 0)) + index;

// Return 0 for invalid indexes
IF 	(getIndex >= count) OR	// Indexing from begin begins with 0
	(getIndex < 0) // Indexing from end begins with -1
THEN
	Get := 0;
	RETURN;
END_IF


current := head;
FOR i := 1 TO getIndex DO // we already got head in previous line, that's why it's from 1
	IF current^.next = NULL THEN
		Get := 0; RETURN;
	END_IF
	current := current^.next;
END_FOR
Get := current^.data;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Insert" Id="{486f34c4-e09f-4631-8cfa-1a17bbbf8f87}">
      <Declaration><![CDATA[// Inserts new element into given index. Negative indexing is supported
METHOD Insert : REFERENCE TO ListOfINT
VAR_INPUT
	(*
		0 = Prepend;
		1 = Insert into second position;
		-2 = Insert into second position from end;
		-1 = Append;
	*)
	index : INT;
	data : INT;
END_VAR
VAR
	new : POINTER TO NodeINT;
	current : POINTER TO NodeINT;
	insertIndex : INT;
	i : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
Insert REF= THIS^;

new := __NEW(NodeINT);
new^.data := data;

// Calculate actual index in List
insertIndex := ((count + 1) * BOOL_TO_INT(index < 0)) + index;

IF insertIndex >= count // Index too high -> append to end
THEN
	Append(data);
	RETURN;
ELSIF insertIndex <= 0 // Index too high from the end -> prepend to beginning
THEN
	Prepend(data);
	RETURN;
END_IF

current := head;
FOR i := 1 TO insertIndex - 1 DO
	current := current^.next;
END_FOR
new^.next := current^.next;
current^.next := new;
count := count + 1;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsEmpty" Id="{c8daf5e1-89e2-448d-93c3-cdee434813f5}">
      <Declaration><![CDATA[
METHOD IsEmpty : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IsEmpty := head = NULL;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Prepend" Id="{d9b48c25-41c0-414c-aa3b-cdefc4eafd14}">
      <Declaration><![CDATA[
// Pushes data to the beginning of the list
METHOD Prepend : REFERENCE TO ListOfINT
VAR_INPUT
	data : INT;
END_VAR
VAR
	new : POINTER TO NodeINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
Prepend REF= THIS^;

new := __NEW(NodeINT);
new^.data := data;
new^.next := head;

IF head = NULL THEN
	head := new;
	tail := new;
ELSE
	head := new;
END_IF
count := count + 1;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove" Id="{436d99dd-7958-4a05-a693-80735993e6d9}">
      <Declaration><![CDATA[
METHOD Remove : REFERENCE TO ListOfINT;
VAR_INPUT
	index : INT;
END_VAR
VAR
	current : POINTER TO NodeINT := NULL;
	removeIndex : INT;	
	nodeToRemove : POINTER TO NodeINT;
	i : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
Remove REF= THIS^;

IF head = NULL THEN
	RETURN;
END_IF;

// Calculate actual index in List
removeIndex := (count * BOOL_TO_INT(index < 0)) + index; 

// Cancel removal for invalid indexes
IF 	(removeIndex >= count) OR // Indexing from begin begins with 0
	(removeIndex < 0) // Indexing from end begins with -1
THEN
	RETURN;
END_IF

IF removeIndex = 0 THEN
	nodeToRemove := head;
	head := head^.next;
ELSE
	current := head;
	FOR i := 1 TO removeIndex - 1 DO
		current := current^.next;
	END_FOR
	nodeToRemove := current^.next;
	current^.next := current^.next^.next;
END_IF
IF nodeToRemove = tail THEN
	tail := current;
END_IF
__DELETE(nodeToRemove);
count := count - 1;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveAll" Id="{3f45cd8a-89c9-4fdc-a178-7158e848eaf5}">
      <Declaration><![CDATA[
METHOD RemoveAll : REFERENCE TO ListOfINT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
WHILE head <> NULL DO
	Remove(0);
END_WHILE
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>